#!/usr/bin/python2.7

import sys
import json
import yaml

def main():

    # Redefine the exception handling routine so that it does NOT
    # do a trace dump if the user types ^C while the command is running.
    #
    old_excepthook = sys.excepthook
    def new_hook(exceptionType, value, traceback):
        if exceptionType != KeyboardInterrupt and exceptionType != IOError:
            old_excepthook(exceptionType, value, traceback)
        else:
            pass
    sys.excepthook = new_hook

    testDict = {}
    testDict['a'] = [1, 2.0, 3]
    testDict['b'] = [2, 3.0, 4]
    testDict['c'] = [4, 6.0, 8]

    print ""
    print "testDict"
    print type(testDict)
    print testDict

    jTest = json.dumps(testDict, ensure_ascii=False)
    print "json data"
    print type(jTest)
    print jTest

    # a_loadedDict = yaml.safe_load(f)

    with open('testout.json', 'w') as f :
        json.dump(jTest, f)

    with open('testout.json', 'r') as f :
        data = json.load(f)
    print "After reading file"
    print type(data)
    print data

    a_loadedDict = yaml.safe_load(data)
    print type(a_loadedDict)
    print a_loadedDict

    # with open('testout.json', 'r') as f :
        # data = json.load(f)
    # a_loadedDict = ast.literal_eval(data)
    # print "After reading file"
    # print a_loadedDict

    # j_loadedDict = json.loads(jTest)
    # print j_loadedDict

    # a_loadedDict = ast.literal_eval(jTest)
    # with open('testout.json', 'r') as infile :
        # a_loadedDict = ast.literal_eval(infile)
    # print "loaded jTest"
    # print a_loadedDict

    # sys.exit(0)
        
if __name__ == '__main__':
    main()
