#!/usr/bin/python2.7

# BSD 3-Clause License
#
# Copyright (c) 2008-2021, James Philip Rowell,
# Alpha Eleven Incorporated
# www.alpha-eleven.com
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#   - Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#
#   - Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in
#     the documentation and/or other materials provided with the
#     distribution.
#
#   - Neither the name of "Alpha Eleven, Inc."  nor the names of its
#     contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import argparse
import os
import sys
import subprocess
import textwrap
import time
import random
import math
from operator import itemgetter
import cmd
import json
import yaml
import copy
from sets import Set

# Constants - like enum type.
ROOT = 0
EXP = 1
POWER = 2
SHUFFLE = 3
ASK_FOR_ROOT = 4

ANSWER_START = 0
ANSWER_TIME  = 1
WAS_CORRECT  = 2

ASK_CONTINUE = 0
GET_ANSWER = 1

kEpsilon = 1.0e-12

# Global prefs - can be adjusted once tested more
# thoroughly for "playability".
#
kQuickWaitCycles = 3
kDelayWaitCycles = 7

# Make sure this is an even number
#
kMaxQListSize = 8

# Temporary filename for saving state
#
gSaveStateFile = "quizPowers.json"

# Global vars
#
gFullQuizList = []
gAskedItems = []
gQuizList = []
gAskAgainQuickList = []
gAskAgainDelayList = []
gAnswerDict = {}

def stndNormDist(x) :
    return 1.0/math.sqrt(math.pow(math.e, x*x))

def genWeights(n) :
    if n <= 0 :
        return []
    result = [1.0]
    scale = float(n-1 if n <= 3 else 3)
    i = 1
    while i < n :
        result.append(stndNormDist(scale*float(i)/float(n-1)))
        i += 1
    return result

def weightedAvg(list) :
    weights = genWeights(len(list))

    wList = []
    i = 0
    while i < len(list) :
        wList.append(weights[i] * list[i])
        i += 1
    return math.fsum(wList) / math.fsum(weights)

def rootQ(power, expn) :
    return str(power) + '^(1/' + str(expn) + ')'

def powerQ(root, expn) :
    return str(root) + '^' + str(expn)

def getSlowestAnswers(n) :
    if n <= 0 :
        return []

    qList = []
    for key in gAnswerDict :
        qList.append(copy.deepcopy(gAnswerDict[key][0]))
        times = []
        i = 1
        while i < len(gAnswerDict[key]) :
            if gAnswerDict[key][i][WAS_CORRECT] :
                times.append(gAnswerDict[key][i][ANSWER_TIME])
            i += 1
        if times == [] :
            qList.pop()
            continue
        times.reverse()
        avgAnswerTime = weightedAvg(times)
        qList[-1][SHUFFLE] = avgAnswerTime

    qList.sort(key=itemgetter(SHUFFLE))
    qList.reverse()

    return qList[:n]

def printQuizList() :
    global gQuizList
    for q in gQuizList :
        print q

def printFullQuizList() :
    global gFullQuizList
    for q in gFullQuizList :
        print q

def printAskedItems() :
    global gAskedItems
    for q in gAskedItems :
        print q

class powersQuiz(cmd.Cmd) :
    'quiz user on powers of integers'

    def __init__(self) :
        self.startTime = 0.0
        self.endTime = 0.0

        self.root = 1
        self.exponent = 1
        self.power = 1
        self.askForRoot = True
        self.correctAnswer = 1
        self.qStr = ""
        self.lastWasWrong = False

        self.prompt = "Begin quiz? "
        self.quizState = ASK_CONTINUE
        self.quickAsk = -1
        self.currentQ = []

        cmd.Cmd.__init__(self)

    def growQuizList(self) :
        global gAskedItems
        global gQuizList

        if self.quickAsk >= 0 :
            if self.quickAsk == 0 or len(gQuizList) == 0 :
                gQuizList.append(gAskAgainQuickList.pop(0))
                self.quickAsk = -1 if (len(gAskAgainQuickList) == 0) else kQuickWaitCycles
                return True

        if self.quickAsk > 0 :
            self.quickAsk -= 1

        # If there are powers in the full list that have not
        # been asked yet draw questions from those.
        #
        if len(gFullQuizList) > 0 :

            if len(gQuizList) < kMaxQListSize/2 :
                while len(gQuizList) < kMaxQListSize and len(gFullQuizList) > 0 :
                    r = gFullQuizList[-1][ROOT]
                    e = gFullQuizList[-1][EXP]
                    x = gFullQuizList[-1][POWER]
                    gAskedItems.append(gFullQuizList.pop())
                    gQuizList.append([r, e, x, 0.0, True])
                    gQuizList.append([r, e, x, 0.0, False])
                i = 0
                while i < len(gQuizList) :
                    gQuizList[i][SHUFFLE] = random.random()
                    i += 1
                gQuizList.sort(key=itemgetter(SHUFFLE))
                return True
            else :
                return False

        # Grows up to max size of gQuizList if gQuizList is empty
        #
        elif len(gQuizList) == 0 :
            gQuizList = getSlowestAnswers(kMaxQListSize)
            i = 0
            while i < len(gQuizList) :
                gQuizList[i][SHUFFLE] = random.random()
                i += 1
            gQuizList.sort(key=itemgetter(SHUFFLE))
            return len(gQuizList) > 0

        else :
            return False


    def preloop(self):
        self.growQuizList()

    def writeState(self) :

        if self.currentQ != [] :
            gQuizList.append(self.currentQ)

        self.lastWasWrong = False
        self.currentQ = []
        self.prompt = 'continue? '
        self.quizState = ASK_CONTINUE

        dumpDict = copy.deepcopy(gAnswerDict)
        dumpDict["gFullQuizList"] = gFullQuizList
        dumpDict["gAskedItems"] = gAskedItems
        dumpDict["gQuizList"] = gQuizList
        dumpDict["gAskAgainQuickList"] = gAskAgainQuickList
        dumpDict["gAskAgainDelayList"] = gAskAgainDelayList

        jQuiz = json.dumps(dumpDict, ensure_ascii=False, sort_keys=True, indent=2, separators=(',',': '))
        with open(gSaveStateFile, 'w') as f :
            f.write(jQuiz)

    def readState(self) :
        global gFullQuizList
        global gAskedItems
        global gQuizList
        global gAskAgainQuickList
        global gAskAgainDelayList
        global gAnswerDict

        with open(gSaveStateFile, 'r') as f :
            qQuiz = f.read()

        dumpDict = yaml.safe_load(qQuiz)

        gFullQuizList = dumpDict.pop("gFullQuizList")
        gAskedItems = dumpDict.pop("gAskedItems")
        gQuizList = dumpDict.pop("gQuizList")
        gAskAgainQuickList = dumpDict.pop("gAskAgainQuickList")
        gAskAgainDelayList = dumpDict.pop("gAskAgainDelayList")
        locAnswerDict = {}
        for key in dumpDict :
            locAnswerDict[key] = [dumpDict[key][0]]
            i = 1
            while i < len(dumpDict[key]) :
                locAnswerDict[key].append( \
                    (dumpDict[key][i][0], dumpDict[key][i][1], dumpDict[key][i][2]))
                i += 1
        gAnswerDict = locAnswerDict

        self.lastWasWrong = False
        self.currentQ = []
        self.prompt = 'continue? '
        self.quizState = ASK_CONTINUE
        if gAskAgainQuickList != [] :
            self.quickAsk = kQuickWaitCycles

    def mergeState(self) :
        global gFullQuizList
        global gAskedItems
        global gQuizList
        global gAskAgainQuickList
        global gAskAgainDelayList
        global gAnswerDict

        if self.currentQ != [] :
            gQuizList.append(self.currentQ)

        self.lastWasWrong = False
        self.currentQ = []
        self.prompt = 'continue? '
        self.quizState = ASK_CONTINUE

        with open(gSaveStateFile, 'r') as f :
            qQuiz = f.read()
        dumpDict = yaml.safe_load(qQuiz)

        locFullQuizList = dumpDict.pop("gFullQuizList")
        locAskedItems = dumpDict.pop("gAskedItems")
        locQuizList = dumpDict.pop("gQuizList")
        locAskAgainQuickList = dumpDict.pop("gAskAgainQuickList")
        locAskAgainDelayList = dumpDict.pop("gAskAgainDelayList")

        for q in locAskedItems :
            if not (q in gAskedItems) :
                gAskedItems.append(q)
        gAskedItems.sort(key=itemgetter(POWER))

        for q in gFullQuizList :
            if q in gAskedItems :
                gFullQuizList.remvove(q)

        for q in locFullQuizList :
            if not (q in gFullQuizList or q in gAskedItems) :
                gFullQuizList.append(q)

        for q in locQuizList :
            if not (q in gQuizList) :
                gQuizList.append(q)
        i = 0
        while i < len(gQuizList) :
            gQuizList[i][SHUFFLE] = random.random()
            i += 1
        gQuizList.sort(key=itemgetter(SHUFFLE))

        for q in locAskAgainQuickList :
            if not (q in gAskAgainQuickList) :
                gAskAgainQuickList.append(q)
        self.quickAsk = kQuickWaitCycles if len(gAskAgainQuickList) > 0 else -1

        for q in locAskAgainDelayList :
            if not (q in gAskAgainDelayList) :
                gAskAgainDelayList.append(q)

        for key in dumpDict :
            if gAnswerDict.has_key(key) :
                q = gAnswerDict[key][0]
                ansList = copy.deepcopy(gAnswerDict[key])
                ansList.pop(0)
                s1 = Set(ansList)

                locAnsList = []
                i = 1
                while i < len(dumpDict[key]) :
                    locAnsList.append( \
                        (dumpDict[key][i][0], dumpDict[key][i][1], dumpDict[key][i][2]))
                    i += 1

                s2 = Set(locAnsList)
                newAnsList = sorted(s1 | s2)
                newAnsList.insert(0, q)
                gAnswerDict[key] = newAnsList
            else :
                gAnswerDict[key] = dumpDict[key]

    def getNextQuestion(self) :

        self.growQuizList()
        self.root       = gQuizList[-1][ROOT]
        self.exponent   = gQuizList[-1][EXP]
        self.power      = gQuizList[-1][POWER]
        self.askForRoot = gQuizList[-1][ASK_FOR_ROOT]
        self.currentQ = gQuizList.pop()

        if self.askForRoot :
            self.correctAnswer = self.root
            self.qStr = rootQ(self.power, self.exponent)
            self.prompt = self.qStr + '? '
        else :
            self.correctAnswer = self.power
            self.qStr = powerQ(self.root, self.exponent)
            self.prompt = self.qStr + '? '

        self.quizState = GET_ANSWER
        self.wasLastWrong = False
        return True

    def emptyline(self):
        global gAnswerDict
        if self.quizState == ASK_CONTINUE :
            self.getNextQuestion()
            self.startTime = time.time()

        elif self.quizState == GET_ANSWER :
            self.endTime = time.time()
            if gAnswerDict.has_key(self.qStr) :
                gAnswerDict[self.qStr].append((self.startTime, (self.endTime - self.startTime), False))
            else :
                gAnswerDict[self.qStr] = [[self.root, self.exponent, self.power, \
                    0.0, self.askForRoot], (self.startTime, (self.endTime - self.startTime), False)]
            if not self.lastWasWrong :
                gAskAgainQuickList.append( \
                    [self.root, self.exponent, self.power, \
                    0.0, self.askForRoot])
            print "--- " + self.qStr + " is " + str(self.correctAnswer) + " ---"
            if self.quickAsk < 0 :
                self.quickAsk = kQuickWaitCycles
            self.lastWasWrong = False
            self.currentQ = []
            self.prompt = 'continue? '
            self.quizState = ASK_CONTINUE

    def default(self, line):
        userAnswer = 0
        global gAnswerDict
        if self.quizState == GET_ANSWER :
            self.endTime = time.time()
            try :
                userAnswer = int(line)
            except ValueError :
                print "Value typed was not an integer"
                self.startTime = time.time()
            else :
                if userAnswer == self.correctAnswer :
                    print "Correct"
                    self.prompt = 'continue? '
                    self.quizState = ASK_CONTINUE
                    self.currentQ = []
                    self.lastWasWrong = False

                else :
                    print "Incorrect"
                    if not self.lastWasWrong :
                        gAskAgainQuickList.append( \
                            [self.root, self.exponent, self.power, \
                            0.0, self.askForRoot])
                        self.lastWasWrong = True
                        if self.quickAsk < 0 :
                            self.quickAsk = kQuickWaitCycles

                if gAnswerDict.has_key(self.qStr) :
                    gAnswerDict[self.qStr].append( \
                        (self.startTime, \
                        (self.endTime - self.startTime), \
                        (userAnswer == self.correctAnswer)))
                else :
                    gAnswerDict[self.qStr] = [[self.root, self.exponent, self.power, \
                        0.0, self.askForRoot], \
                        (self.startTime, (self.endTime - self.startTime), \
                        (userAnswer == self.correctAnswer))]

                self.startTime = time.time()
        else :
            print "Unknown command. Try 'help'"

    def precmd(self, line):
        return cmd.Cmd.precmd(self, line)

    def postcmd(self, stop, line):
        '''
        print '***postcmd***'
        print "gAnswerDict..."
        for key in gAnswerDict :
            print key
            print gAnswerDict[key]
        print "gQuizList..."
        printQuizList()
        print "gFullQuizList..."
        printFullQuizList()
        print "gAskedItems..."
        printAskedItems()
        '''
        print ''
        return cmd.Cmd.postcmd(self, stop, line)

    def do_repeat(self, line) :
        gFullQuizList = gAskedItems
        gFullQuizList.reverse
        # '''
        print '***repeat***'
        print "gFullQuizList..."
        printFullQuizList()
        print "gAskedItems..."
        printAskedItems()
        # '''

    def do_stats(self, line) :
        for key in gAnswerDict :
            print key
            print gAnswerDict[key]

    def do_write(self, line) :
        self.writeState()

    def do_read(self, line) :
        self.readState()

    def do_merge(self, line) :
        self.mergeState()

    def do_EOF(self, line):
        "Exit"
        return True

def main():

    # Redefine the exception handling routine so that it does NOT
    # do a trace dump if the user types ^C while the command is running.
    #
    old_excepthook = sys.excepthook
    def new_hook(exceptionType, value, traceback):
        if exceptionType != KeyboardInterrupt and exceptionType != IOError:
            old_excepthook(exceptionType, value, traceback)
        else:
            pass
    sys.excepthook = new_hook

    p = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description=textwrap.dedent('''\
            Quiz the user's memory on squares and cubes, 4th powers etc.
            '''),
        usage="%(prog)s [OPTION]...")

    p.add_argument("--version", action="version", version="0.100")
    p.add_argument("--power", "-n", action="store", type=int, dest="n",
        default=2, nargs='+',
        help="List powers to test user on, eg. squares are 2, cubes 3 etc. (default=2).")
    p.add_argument("--max", "-m", action="store", type=int, dest="m",
        default=31, metavar="M",
        help="Test the Nth power of the integers 2 to M (default=31).")
    p.add_argument("--primes", action="store_true",
        dest="onlyPrimes", default=False,
        help="only test the Nth power of primes" )
    p.add_argument("--limit", action="store", type=float, dest="maxDigits",
        default=-1.0, metavar="MAX",
        help="Limit testing powers to integers of length MAX-digits or less")

    args = p.parse_args()

    rootList = []
    powerList = []

    if type(args.n) == int :
        powerList = [ args.n ]
    else :
        powerList = args.n

    for i in powerList :
        if i < 2 :
            print >> sys.stderr, os.path.basename(sys.argv[0]) + \
                ": error: --power must be greater than or equal to two."
            sys.exit(1)

    if args.m < 2 :
        print >> sys.stderr, os.path.basename(sys.argv[0]) + \
            ": error: the range (--max) must be greater than or equal to two."
        sys.exit(1)

    if args.maxDigits == 0 :
        print >> sys.stderr, os.path.basename(sys.argv[0]) + \
            ": warning: max digits is 0, nothing to print."
        sys.exit(0)

    # Note: this "isPrime" array will be filled with True
    # in the case that we want to display ALL the integers
    # from 2,m
    #
    isPrime = [True]*(args.m+1)

    # Sieve of Eratosthenes - skipped when wanting to list ALL numbers
    #
    if args.onlyPrimes :
        p = 2
        while p < (args.m / 2) :
            i = 2
            while p*i <= args.m :
                isPrime[p*i] = False
                i += 1
            p += 1
            while not isPrime[p] :
                p += 1

    i = 2
    while i < len(isPrime) :
        if isPrime[i] :
            rootList.append(i)
        i += 1

    for e in powerList :
        for r in rootList :
            x = pow(r, e)
            if args.maxDigits > 0.0 and math.log(x, 10) > args.maxDigits - kEpsilon :
                continue
            gFullQuizList.append((r, e, x))
    gFullQuizList.sort(key=itemgetter(POWER))
    gFullQuizList.reverse()
    ### print gFullQuizList

    random.seed()

    powersQuiz().cmdloop()
    sys.exit(0)

if __name__ == '__main__':
    main()
