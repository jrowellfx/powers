#!/usr/bin/python2.7

import argparse
import os
import sys
import subprocess
import textwrap
import time
import random
import math
from operator import itemgetter
import cmd

ROOT = 0
EXP = 1
POWER = 2
SHUFFLE = 3
ASK_FOR_ROOT = 4

ASK_CONTINUE = 0
GET_ANSWER = 1

quizList = []
rootList = []
powerList = []

def rootQ(power, expn) :
    return str(power) + '^(1/' + str(expn) + ')'

def powerQ(root, expn) :
    return str(root) + '^' + str(expn)

class powersQuiz(cmd.Cmd) :
    'quiz user on powers of integers'

    def __init__(self) :
	global ASK_CONTINUE

        self.i = -1
	self.startTime = 0.0
	self.endTime = 0.0

	self.root = 1
	self.exponent = 1
	self.nthPower = 1
	self.askForRoot = True
	self.correctAnswer = 1

        self.prompt = "Begin quiz? "
	self.quizState = ASK_CONTINUE

        cmd.Cmd.__init__(self)

    def getNextQuestion(self) :
	global quizList
	global ROOT
	global EXP
	global POWER
	global SHUFFLE
	global ASK_FOR_ROOT
	global GET_ANSWER

	self.i += 1

	if self.i >= len(quizList) :
	    # Explore better way of doing this later - jpr
	    sys.exit(0)

	self.root = quizList[self.i][ROOT]
	self.exponent = quizList[self.i][EXP]
	self.nthPower = quizList[self.i][POWER]
	self.askForRoot = quizList[self.i][ASK_FOR_ROOT]

	if self.askForRoot :
	    self.correctAnswer = self.root
	    self.prompt = rootQ(self.nthPower, self.exponent) + '? '
	else :
	    self.correctAnswer = self.nthPower
	    self.prompt = powerQ(self.root, self.exponent) + '? '

	self.quizState = GET_ANSWER

    def emptyline(self):
	global ASK_CONTINUE
	global GET_ANSWER

	if self.quizState == ASK_CONTINUE :
	    self.getNextQuestion()
	    self.startTime = time.time()

	elif self.quizState == GET_ANSWER :
	    self.endTime = time.time()
	    print self.correctAnswer
	    self.prompt = 'continue? '
	    self.quizState = ASK_CONTINUE
    
    def default(self, line):
	if self.quizState == GET_ANSWER :
	    self.endTime = time.time()
	    try :
		userAnswer = int(line)
	    except ValueError :
		print "Value typed was not an integer"
		self.startTime = time.time()
	    else :
		if userAnswer == self.correctAnswer :
		    print "Correct"
		    self.prompt = 'continue? '
		    self.quizState = ASK_CONTINUE
		else :
		    print "Incorrect"
		    self.startTime = time.time()
	else :
	    print "Unknown command. Try 'help'"
    
    def postcmd(self, stop, line):
	print ''
	return cmd.Cmd.postcmd(self, stop, line)
    
    def do_pass(self, line):
	"Don't know the answer, skip the question being asked"
	print 'skipping'

    def do_EOF(self, line):
	"Exit"
	return True

def main():

    kEpsilon = 1.0e-12

    global quizList
    global rootList
    global powerList

    # Redefine the exception handling routine so that it does NOT
    # do a trace dump if the user types ^C while the command is running.
    #
    old_excepthook = sys.excepthook
    def new_hook(exceptionType, value, traceback):
        if exceptionType != KeyboardInterrupt and exceptionType != IOError:
            old_excepthook(exceptionType, value, traceback)
        else:
            pass
    sys.excepthook = new_hook

    p = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description=textwrap.dedent('''\
            Quiz the user's memory on squares and cubes, 4th powers etc.
            '''),
        usage="%(prog)s [OPTION]...")

    p.add_argument("--version", action="version", version="0.100")
    p.add_argument("--power", "-n", action="store", type=int, dest="n",
        default=2, nargs='+',
	help="List powers to test user on, eg. squares are 2, cubes 3 etc. (default=2).")
    p.add_argument("--max", "-m", action="store", type=int, dest="m",
        default=31, metavar="M",
	help="Test the Nth power of the integers 2 to M (default=31).")
    p.add_argument("--primes", action="store_true",
        dest="onlyPrimes", default=False,
        help="only test the Nth power of primes" )
    p.add_argument("--limit", action="store", type=float, dest="maxDigits",
        default=-1.0, metavar="MAX",
	help="Limit testing powers to integers of length MAX-digits or less")

    args = p.parse_args()

    if type(args.n) == int :
        powerList = [ args.n ]
    else :
        powerList = args.n

    for i in powerList :
        if i < 2 :
            print >> sys.stderr, os.path.basename(sys.argv[0]) + \
                ": error: --power must be greater than or equal to two."
            sys.exit(1)

    if args.m < 2 :
        print >> sys.stderr, os.path.basename(sys.argv[0]) + \
            ": error: the range (--max) must be greater than or equal to two."
        sys.exit(1)

    if args.maxDigits == 0 :
        print >> sys.stderr, os.path.basename(sys.argv[0]) + \
            ": warning: max digits is 0, nothing to print."
        sys.exit(0)

    # Note: this "isPrime" array will be filled with True
    # in the case that we want to display ALL the integers
    # from 2,m 
    #
    isPrime = [True]*(args.m+1)

    # Sieve of Eratosthenes - skipped when wanting to list ALL numbers
    #
    if args.onlyPrimes :
        p = 2
        while p < (args.m / 2) :
            i = 2
            while p*i <= args.m :
                isPrime[p*i] = False
                i += 1
            p += 1
            while not isPrime[p] :
                p += 1

    i = 2
    while i < len(isPrime) :
	if isPrime[i] :
	    rootList.append(i)
	i += 1

    for n in powerList :
	for r in rootList :
            x = pow(r, n)
	    if args.maxDigits > 0.0 \
		and math.log(x, 10) > args.maxDigits - kEpsilon :
		continue
            quizList.append((r, n, x, random.random(), True))
            quizList.append((r, n, x, random.random(), False))

    quizList.sort(key=itemgetter(SHUFFLE))

    powersQuiz().cmdloop()
    sys.exit(0)

if __name__ == '__main__':
    main()
