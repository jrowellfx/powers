#!/usr/bin/python2.7

import argparse
import os
import sys
import subprocess
import textwrap

def main():

    # Redefine the exception handling routine so that it does NOT
    # do a trace dump if the user types ^C while lsseq is running.
    #
    old_excepthook = sys.excepthook
    def new_hook(exceptionType, value, traceback):
        if exceptionType != KeyboardInterrupt and exceptionType != IOError:
            old_excepthook(exceptionType, value, traceback)
        else:
            pass
    sys.excepthook = new_hook

    p = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description=textwrap.dedent('''\
            Print table of powers of 2 up to n of integers 2 up to m.
            '''),
        usage="%(prog)s [OPTION]...")

    p.add_argument("--version", action="version", version="0.100")
    p.add_argument("--power", "-n", action="store", type=int, dest="n",
        default=3, metavar="N",
	help="The highest power in the table will be N (default=3).")
    p.add_argument("--max", "-m", action="store", type=int, dest="m",
        default=20, metavar="M", help="Print the powers from 2 to M (default=20).")
    p.add_argument("--primes", action="store_true",
        dest="onlyPrimes", default=False,
        help="only print out powers of primes" )

    args = p.parse_args()

    if args.n < 2 :
        print >> sys.stderr, os.path.basename(sys.argv[0]) + \
            ": error: the maximum power must be greater than one."
        sys.exit(0)

    if args.m < 2 :
        print >> sys.stderr, os.path.basename(sys.argv[0]) + \
            ": error: The maximum integer M to calculate powers for must be greater than one."
        sys.exit(0)

    # Note: this "isPrime" array will be filled with True 
    # in the case that we want to display ALL the integers
    # from 2,m - sorry, it's a bit of a cheat to use this list
    # this way, but it makes for clean code.
    #
    isPrime = [True]*(args.m+1)

    # Sieve of Eratosthenes - skipped when wanting to list ALL numbers
    #
    if args.onlyPrimes : 
	p = 2
	while p < (args.m / 2) :
	    i = 2
	    while p*i <= args.m :
		isPrime[p*i] = False
		i += 1
	    p += 1
	    while not isPrime[p] :
		p += 1

    # Find the largest prime in table
    #
    if not args.onlyPrimes :
	maxM = args.m
    else :
	i = len(isPrime)
	i -= 1
	while not isPrime[i] : 
	    i -= 1
	maxM = i

    # Calculate the length of the strings of the highest powers
    # to be printed out (for formatting purposes)
    #
    outputLine = ""
    formatList = [0]
    n = 1
    while n <= args.n :
	format = "{:>,d}"
        s = format.format(pow(maxM, n))
	# print s
        formatList.append(len(s))
	format = "{:>"+ str(formatList[-1]) + ",d}"
	outputLine += format.format(n)
	if n == 1 :
	    outputLine += " | "
	else :
	    outputLine += "  "
        n += 1

    # Make the dividing line between list of powers 
    # and first row of powers of 2.
    #
    dividingLine = "-"*len(outputLine)
    s = list(dividingLine)
    s[formatList[1] + 1] = '+'

    # Print the powers to be displayed on first row
    # then the dividing line.
    #
    print outputLine
    print "".join(s)

    # Now calculate and print the powers
    #
    m = 2
    while m <= args.m :
	format = "{:>"+ str(formatList[1]) + ",d}"
	outputLine = format.format(m) + " | "
        n = 2
        while n <= args.n :
	    format = "{:>"+ str(formatList[n]) + ",d}"
            outputLine += format.format(pow(m, n)) + "  "
            n += 1
	if isPrime[m] :
	    print outputLine
        m += 1
        
if __name__ == '__main__':
    main()
