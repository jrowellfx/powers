#!/usr/bin/env python3

# 3-Clause BSD License
# 
# Copyright (c) 2008-2025, James Philip Rowell,
# Alpha Eleven Incorporated
# www.alpha-eleven.com
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
# 
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in
#     the documentation and/or other materials provided with the
#     distribution.
# 
#  3. Neither the name of the copyright holder, "Alpha Eleven, Inc.",
#     nor the names of its contributors may be used to endorse or
#     promote products derived from this software without specific prior
#     written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import argparse
import os
import sys
import subprocess
import textwrap
import math

def main():

    kEpsilon = 1.0e-12

    # Redefine the exception handling routine so that it does NOT
    # do a trace dump if the user types ^C while the command is running.
    #
    old_excepthook = sys.excepthook
    def new_hook(exceptionType, value, traceback):
        if exceptionType != KeyboardInterrupt and exceptionType != IOError:
            old_excepthook(exceptionType, value, traceback)
        else:
            pass
    sys.excepthook = new_hook

    p = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description=textwrap.dedent('''\
            Print table of powers with exponents 2 up to n of integer roots 2 up to m.
            '''),
        usage="%(prog)s [OPTION]...")

    p.add_argument("--version", action="version", version="1.002")
    p.add_argument("--maxExponent", "-n", action="store", type=int, dest="n",
        default=4, metavar="N",
        help="The highest exponent in the table will be N (default=4).")
    p.add_argument("--maxRoot", "-m", action="store", type=int, dest="m",
        default=13, metavar="M",
        help="Print the powers of integers from 2 to M (default=13).")
    p.add_argument("--primes", action="store_true",
        dest="onlyPrimes", default=False,
        help="only print out powers of primes" )
    p.add_argument("--limit", action="store", type=float, dest="maxDigits",
        default=-1.0, metavar="MAX",
        help="Limit printing powers to numbers of length MAX-digits or less")

    args = p.parse_args()

    if args.n < 2 :
        print(os.path.basename(sys.argv[0]) + \
            ": error: the maximum exponent (--maxExponent) must be greater than one.", file=sys.stderr)
        sys.exit(1)

    if args.m < 2 :
        print(os.path.basename(sys.argv[0]) + \
            ": error: the maximum integer in the range (--maxRoot) must be greater than one.", file=sys.stderr)
        sys.exit(1)

    if args.maxDigits == 0.0 :
        print(os.path.basename(sys.argv[0]) + \
            ": warning: max digits is 0, nothing to print.", file=sys.stderr)
        sys.exit(0)

    # Note: this "isPrime" array will be filled with True
    # in the case that we want to display ALL the integers
    # from 2,m - sorry, it's a bit of a cheat to use this list
    # this way, but it makes for clean code.
    #
    isPrime = [True]*(args.m+1)

    # Sieve of Eratosthenes - skipped when wanting to list ALL numbers
    #
    if args.onlyPrimes :
        p = 2
        while p < (args.m / 2) :
            i = 2
            while p*i <= args.m :
                isPrime[p*i] = False
                i += 1
            p += 1
            while not isPrime[p] :
                p += 1

    # Find the largest prime in table
    #
    if not args.onlyPrimes :
        maxM = args.m
    else :
        i = len(isPrime) - 1
        while not isPrime[i] :
            i -= 1
        maxM = i
    maxN = args.n

    if args.maxDigits > 0 :

        # Calculate the highest exponent to be printed out
        # (for formatting purposes)
        #
        n = 2
        while n <= maxN :
            if math.log(pow(2, n), 10) > args.maxDigits - kEpsilon :
                n -= 1
                break
            n += 1
        #
        if n < maxN :
            maxN = n

        # Calculate the highest root to be printed out
        # (for formatting purposes)
        #
        m = 2
        while m <= maxM :
            if math.log(pow(m, 2), 10) > args.maxDigits - kEpsilon :
                m -= 1
                break
            m += 1
        #
        if m < maxM :
            maxM = m
        while not isPrime[maxM] :
            maxM -= 1

    outputLine = ""
    formatList = [0]
    commaFormat = "{:>,d}"
    commaFormatMaxLen = 0
    if args.maxDigits > 0 :
        commaFormatMaxLen \
            = len(commaFormat.format(int("9"*int(math.ceil(args.maxDigits)))))
    n = 1
    while n <= maxN :
        if args.maxDigits > 0 :
            #
            # Need to calculate the actual length of the highest
            # nth power of the integer 'm' that also satisfies the constraint
            # of 'maxDigits' and possibly taking into account whether it's prime.
            #
            m = 2
            while m <= maxM :
                x = pow(m, n)
                if math.log(x, 10) > args.maxDigits - kEpsilon :
                    m -= 1
                    break
                m += 1
            m = m if (m <= maxM) else maxM
            while not isPrime[m] :
                m -= 1
            x = pow(m, n)
            xWithCommas = commaFormat.format(x)
            formatList.append(len(xWithCommas))

        else :
            x = pow(maxM, n)
            xWithCommas = commaFormat.format(x)
            formatList.append(len(xWithCommas))

        commaFormatPad = "{:>"+ str(formatList[-1]) + ",d}"
        outputLine += commaFormatPad.format(n)
        if n == 1 :
            outputLine = outputLine.replace("1", " ")
            outputLine += " | "
        else :
            outputLine += "  "
        n += 1

    # Make the dividing line between list of exponents
    # and first row of powers of 2.
    #
    dividingLine = "-"*len(outputLine)
    s = list(dividingLine)
    s[formatList[1] + 1] = '+'

    # Print the exponents to be displayed on first row
    # then the dividing line.
    #
    print(outputLine)
    print("".join(s))

    # Now calculate and print the powers
    #
    m = 2
    while m <= maxM :
        commaFormatPad = "{:>"+ str(formatList[1]) + ",d}"
        outputLine = commaFormatPad.format(m) + " | "
        n = 2
        if isPrime[m] :
            while n <= maxN :
                x = pow(m, n)
                commaFormatPad = "{:>"+ str(formatList[n]) + ",d}"
                if args.maxDigits > 0 :
                    if math.log(x, 10) <= args.maxDigits - kEpsilon :
                        outputLine += commaFormatPad.format(x) + "  "
                    else :
                        break
                else :
                    outputLine += commaFormatPad.format(x) + "  "
                n += 1
            print(outputLine)
        m += 1

if __name__ == '__main__':
    main()
